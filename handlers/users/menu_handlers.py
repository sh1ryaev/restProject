import asyncio
import datetime
from typing import Union
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command, Text
from aiogram.types import CallbackQuery, Message, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton, \
    KeyboardButton, ReplyKeyboardMarkup
from aiogram.utils.callback_data import CallbackData

from keyboards.inline.menu_keyboards import menu_cd, categories_keyboard, \
    items_keyboard, item_keyboard, basket_keyboard, create_order
from loader import dp, bot
from states.test import DoOrder
from utils.db_api.database import create_db
from utils.db_api.db_commands import read_dish, read_basket, add_dish_in_basket, delete_basket, plus_basket, \
    minus_basket, create_new_order, read_customer, create_sostav_order, read_dishes

payment_order = CallbackData("payment_order","payment")
new_order = CallbackData("new_order", "payment")

def make_payment_order(payment):
    return payment_order.new(payment=payment)

def make_new_order(payment):
    return new_order.new(payment=payment)


@dp.message_handler(Command("menu"))
async def show_menu(message: types.Message):
    await list_categories(message)


async def list_categories(message: Union[CallbackQuery, Message], **kwargs):
    markup = await categories_keyboard()
    if isinstance(message, Message):
        await message.answer("–ù–∞—à–µ –º–µ–Ω—é", reply_markup=markup)
    elif isinstance(message, CallbackQuery):
        call = message
        await call.message.edit_reply_markup(markup)


async def list_items(callback: CallbackQuery, category, **kwargs):
    markup = await items_keyboard(category)
    items = await read_dishes(category)
    for item in items:
        await show_item(callback, category=category,
        item_id=item.id)
    inline_btn_1 = InlineKeyboardButton('–ê—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç', callback_data='button1')
    inline_kb1 = InlineKeyboardMarkup().add(inline_btn_1)
    await callback.message.answer("–ù–∞–∂–º–∏—Ç–µ /menu —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–∞")


async def show_item(callback: CallbackQuery, category, item_id):
    markup = item_keyboard(category, item_id)
    item = await read_dish(item_id)
    text = f"{item.name} {item.price}‚ÇΩ\n\n{item.description}"
    await bot.send_photo(callback.message.chat.id, photo=item.photo)
    await callback.message.answer(text=text, reply_markup=markup)


async def show_basket(callback: CallbackQuery, category, **kwargs):
    bas_id = callback.message.chat.id
    markup = await basket_keyboard(category, bas_id)
    basket = await read_basket(bas_id)
    text='–í–∞—à –∑–∞–∫–∞–∑:'+'\n'
    sum=0
    if len(basket) < 1:
        text="–ó–∞–∫–∞–∑ –ø—É—Å—Ç..."
    else:
        for item_in_basket in basket:
            item = await read_dish(item_in_basket.id_prod)
            text+=f"{item.category_name[0]}{item.name}\n üîπ–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item_in_basket.kolvo}—à—Ç.\n üîπ–¶–µ–Ω–∞: {item.price}‚ÇΩ" \
              f"\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n"
            sum+=item.price*item_in_basket.kolvo
        text+=f"–û–±—â–∞—è —Å—É–º–º–∞: {sum}‚ÇΩ"
    # –ò–∑–º–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    await callback.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(create_order.filter())
async def do_order(call: CallbackQuery, callback_data: dict):
    bas_id = call.message.chat.id
    basket = await read_basket(bas_id)
    sum = 0
    user = await read_customer(str(bas_id))
    if user == None:
        await call.message.answer("–ü–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –∑–∞–∫–∞–∑–∞ –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n/register")
    else:
        if len(basket) > 0:
            await state1(call)
        else:
            pass


async def state1(call: CallbackQuery):
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(
            text=f"–ù–∞–ª–∏—á–Ω—ã–µ",
            callback_data=make_payment_order(payment="–ù–∞–ª–∏—á–Ω—ã–µ")
        )
    )
    markup.row(
        InlineKeyboardButton(
            text=f"–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É",
            callback_data=make_payment_order(payment="–ö–∞—Ä—Ç–æ–π –∫—É—Ä—å–µ—Ä—É"))
    )
    await call.message.edit_text(text="–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)


@dp.callback_query_handler(payment_order.filter())
async def choise(call: CallbackQuery, callback_data: dict):
    payment = callback_data.get("payment")
    text=""
    sum=0
    bas_id = call.message.chat.id
    basket = await read_basket(bas_id)
    user = await read_customer(str(bas_id))
    for product_in_basket in basket:
        item = await read_dish(product_in_basket.id_prod)
        text+=f"–¢–æ–≤–∞—Ä: {item.name}\n –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {product_in_basket.kolvo}—à—Ç.\n –¶–µ–Ω–∞: {item.price}‚ÇΩ" \
              f"\n„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞„Ä∞\n"
        sum+=item.price*product_in_basket.kolvo
    text+=f"–û–±—â–∞—è —Å—É–º–º–∞: {sum}‚ÇΩ –¢–∏–ø –æ–ø–ª–∞—Ç—ã: {payment}\n–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user.address}\n" \
          f"–ò–∑–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞ /menu\n" \
          f"–ò–∑–º–µ–Ω–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ /profile"
    markup = InlineKeyboardMarkup()
    markup.row(
        InlineKeyboardButton(
            text=f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑",
            callback_data=make_new_order(payment=payment)
        )
    )
    await call.message.edit_text(text=text, reply_markup=markup)


@dp.callback_query_handler(new_order.filter())
async def create(call: CallbackQuery, callback_data: dict):
    payment = callback_data.get("payment")
    bas_id = call.message.chat.id
    basket = await read_basket(bas_id)
    sum = 0
    user = await read_customer(str(bas_id))
    for product_in_basket in basket:
        item = await read_dish(product_in_basket.id_prod)
        sum += item.price * product_in_basket.kolvo
    order = await create_new_order(id_user=str(bas_id), summa=sum, order_date=datetime.datetime.now(),
                                   payment_type=payment, address=user.address)
    for product_in_basket in basket:
        item = await read_dish(product_in_basket.id_prod)
        await create_sostav_order(id=order.id, id_user=str(bas_id), id_prod=product_in_basket.id_prod,
                                  price=product_in_basket.price, kolvo=product_in_basket.kolvo)
    await delete_basket(id=bas_id)
    await call.message.edit_text(text="–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n–í–∞—à–∏ –∑–∞–∫–∞–∑—ã –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–¥–µ—Å—å - /my_orders")


@dp.callback_query_handler(menu_cd.filter())
async def navigate(call: CallbackQuery, callback_data: dict):
    current_level = callback_data.get("level")
    category = callback_data.get("category")
    item_id = int(callback_data.get("item_id"))
    buy = int(callback_data.get("buy"))
    clear = int(callback_data.get("clear"))
    delete = int(callback_data.get("delete"))
    add = int(callback_data.get("add"))
    if buy == 1:
        bas_id = call.message.chat.id
        item = await read_dish(item_id)
        res = await add_dish_in_basket(id = bas_id,
                                    id_prod=item_id,
                                    price=item.price,
                                    kolvo=1)

    if clear == 1:
        bas_id = call.message.chat.id
        await delete_basket(id=bas_id)
    if add == 1:
        bas_id = call.message.chat.id
        await plus_basket(id=bas_id, dish_id=item_id)
    if delete == 1:
        bas_id = call.message.chat.id
        await minus_basket(id=bas_id, dish_id=item_id)

    levels = {
        "0": list_categories,  # –û—Ç–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        "1": list_items,  # –û—Ç–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        "2": show_item,  # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä
        "3": show_basket  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
    }
    current_level_function = levels[current_level]
    await current_level_function(
        call,
        category=category,
        item_id=item_id
    )
